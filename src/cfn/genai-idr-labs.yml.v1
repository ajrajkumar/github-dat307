---
AWSTemplateFormatVersion: 2010-09-09

Description: >
    This template deploys a VPC, Aurora DB Cluster, and a Amazon SageMaker Notebook Instance

Parameters:
  TemplateName:
    Type: String
    Default: genai-idr-labs
    Description: Name used for different elements created.

  VpcName:
    Default: APGPGVectorWorkshop
    Type: String

  VpcCIDR:
    Default: 10.215.0.0/16
    Type: String

  Subnet1CIDR:
    Default: 10.215.10.0/24
    Type: String

  Subnet2CIDR:
    Default: 10.215.20.0/24
    Type: String

  Subnet3CIDR:
    Default: 10.215.30.0/24
    Type: String

  Subnet4CIDR:
    Default: 10.215.40.0/24
    Type: String

  DefaultCodeRepository:
    Default: https://github.com/aws-samples/aurora-postgresql-pgvector.git
    Type: String

  DBEngineVersion:
    Type: String
    Default: 15.6
    AllowedValues:
      - 15.6
  
  DBInstanceSize:
    Type: String
    Default: db.r6gd.2xlarge
    AllowedValues:
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6gd.2xlarge
      - db.r6g.4xlarge
      - db.r6gd.4xlarge

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 5432
    ConstraintDescription: 'Must be in the range [1150-65535]'
    MinValue: 1150
    MaxValue: 65535

  IsWorkshopStudioEnv:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: Whether this stack is being deployed in a Workshop Studio environment or not. If not sure, leave as default of "no".

  ParticipantRoleArn:
    Type: String
    Description: Workshop studio magic variable ParticipantRoleArn

  AssetsBucketName:
    Type: String
    Description: Workshop studio magic variable AssetsBucketName
    
  AssetsBucketPrefix:
    Type: String
    Description: Workshop studio magic variable AssetsBucketPrefix    

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  ECRRepoS3Upload:
    Description: >
      ECR Repo for s3 Upload container image
    Type: String
    Default: "dat307-s3-upload:1.0"

## Conditions
Conditions:
  isInWS:
    !Equals [ !Ref IsWorkshopStudioEnv, "yes" ]
  isNotInWS:
    !Equals [ !Ref IsWorkshopStudioEnv, "no" ]    

  isWorkshopStudio: !Equals [ !Ref IsWorkshopStudioEnv, "yes"]

Resources:
## Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-monitor-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

# VPC ----------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet4CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref VpcName

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  Subnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet4

# END VPC ------------------------------------------------------


# NOTEBOOK -----------------------------------------------------
  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: "ml.c5.2xlarge"
      RoleArn: !GetAtt ExecutionRole.Arn
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      DefaultCodeRepository: !Ref DefaultCodeRepository
      VolumeSizeInGB: 50
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Notebook Instance Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - 
          PolicyName: "s3_access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "s3:PutBucketPolicy"
                  - "s3:DeleteBucket"
                Resource: "arn:aws:s3:::sagemaker-*"                

# END NOTEBOOK -------------------------------------------------

# RDS IAM Role for Amazon Bedrock ------------------------------

  AuroraBedrockRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: 'Aurora-Bedrock-Role'
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - 
          PolicyName: 'Aurora-Bedrock-Policy'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "bedrock:InvokeModel"
                Resource: [ !Sub "arn:aws:bedrock:*:${AWS::AccountId}:provisioned-model/*" , "arn:aws:bedrock:*::foundation-model/*" ]

# END RDS IAM Role for Amazon Bedrock ------------------------------

# Aurora PostgreSQL -----------------------------------------------

  EncryptionKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS DB Subnet Group"
      SubnetIds: [!Ref Subnet3, !Ref Subnet4 ]

  ## Create parameter groups for DB cluster
  apgcustomclusterparamgroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: "Aurora PostgreSQL Custom Cluster parameter group"
      Family: aurora-postgresql15
      Parameters:
        shared_preload_libraries: "pg_stat_statements"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-clusterparamgroup"
  
  ## Create parameter groups for cluster nodes
  apgcustomdbparamgroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${AWS::StackName}-dbparamgroup
      Family: aurora-postgresql15
      Parameters:
        log_rotation_age: '1440'
        log_rotation_size: '102400'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-dbparamgroup

  RDSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "apgpg-pgvector-secret"
      Description: 'This is the secret for Aurora cluster'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres", "database": "postgres" }'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  RDSSecrets1:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "rdspg-pgvector-secret"
      Description: 'This is the secret for RDS PostgreSQL cluster'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres" }'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  SecretsManagerVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
      SecurityGroupIds:
        - !GetAtt VPCSecurityGroup.GroupId
        - !GetAtt EC2SecurityGroup.GroupId
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .secretsmanager

  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: !Ref VpcCIDR
        Description: 'Access to AppServer Host Security Group'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-DBSecurityGroup'

## Create Aurora cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: "apgpg-pgvector"
      Engine: aurora-postgresql
      Port: !Ref DBPort
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:password}}' ]]
      DBClusterParameterGroupName: !Ref apgcustomclusterparamgroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AutoMinorVersionUpgrade: true
      EngineVersion: "15.6"
      KmsKeyId: !Ref EncryptionKey
      StorageEncrypted: true
      StorageType: aurora-iopt1
      BackupRetentionPeriod: 7
      DeletionProtection: false
      VpcSecurityGroupIds: [ !Ref VPCSecurityGroup ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

## Deploy the first cluster node (always the writer)
  DBNodeWriter:
    Type: AWS::RDS::DBInstance
    DependsOn: DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-01
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref apgcustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-01

## Deploy the reader node  
  DBNodeReader:
    Type: AWS::RDS::DBInstance
    DependsOn: DBNodeWriter
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-02
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref apgcustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-02

  SecretPostgreSQLAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecrets
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

  DBInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      DBInstanceIdentifier: "rdspg1"
      AllocatedStorage: "100"
      DBInstanceClass: db.t3.large
      Engine: postgres
      DBName: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets1, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets1, ':SecretString:password}}' ]]
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref VPCSecurityGroup
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      EngineVersion: "15.6"
      KmsKeyId: !Ref EncryptionKey
      MultiAZ: false
      StorageType: io1
      Iops: 1000
      StorageEncrypted: true
      BackupRetentionPeriod: 0
      DeletionProtection: true
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

  SecretPostgreSQLAttachment1:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecrets1
      TargetId: !Ref DBInstance1
      TargetType: AWS::RDS::DBInstance

# end Aurora PostgreSQL -----------------------------------------------

# begin JumpBox         -----------------------------------------------

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-EC2Role"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-EC2PolicyForADRDS"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Ref RDSSecrets
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: !Ref RDSSecrets1                
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-EC2IProfile"
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub "EC2 Bastion Secuirty Group for ${AWS::StackName}"
      GroupName: !Sub '${AWS::StackName}-EC2SecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref VpcCIDR
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-BastionSecurityGroup'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref Subnet1
      InstanceType: t2.medium
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AmiID
      SecurityGroupIds:
        - !GetAtt "EC2SecurityGroup.GroupId"

  InstanceSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: Install necessary libraries
        mainSteps:
        - action: aws:runShellScript
          name: runCommands
          inputs:
            timeoutSeconds: '600'
            runCommand:
            - /usr/bin/sudo /usr/bin/yum -y install git python3 python3-devel python3-psycopg2 python3-pip docker postgresql15 postgresql15-contrib postgresql15-server
            - /usr/bin/pip3 install mysql-connector-python boto3

  EC2Association:
    Type: AWS::SSM::Association
    Properties:
      Name: !Ref InstanceSSMDocument
      Targets:
      - Key: InstanceIds
        Values: [ !Ref EC2Instance ]

# end JumpBox           -----------------------------------------------

# Creating bucket for loading Knowledge Base for Bedrock
  BedrockKB:
    Type: AWS::S3::Bucket

  S3VPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VPC

# end of S3 Bucket

# Create S3 Loader Workflow
# 1. S3 Bucket put event, invoking Lambda
# 2. Lambda downloading file from S3 Bucket, creating chunks, Generate embeddings using Bedrock LLM, and store in PostgreSQL

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3UploadLambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt BedrockKB.Arn

  S3UploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonBedrockFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBFullAccess
      Policies:
        - PolicyName: S3UploadLambdaPolicy2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-data:ExecuteStatement
                  - secretsmanager:GetSecretValue
                  - ec2:*
                Resource: '*'
        - PolicyName: S3UploadLambdaPolicy1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Join [ '', [ !GetAtt BedrockKB.Arn] ]
                  - !Join [ '', [ !GetAtt BedrockKB.Arn, '/*'] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  S3UploadLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-s3upload"
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoS3Upload}
      Role: !GetAtt S3UploadLambdaRole.Arn
      MemorySize: 2048
      Timeout: 900
      Environment:
        Variables:
          DBSECRET: !Ref RDSSecrets
      TracingConfig:
        Mode: "PassThrough"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
        SubnetIds: [ !Ref Subnet3, !Ref Subnet4 ]

  BedrockVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
      SecurityGroupIds:
        - !GetAtt VPCSecurityGroup.GroupId
        - !GetAtt EC2SecurityGroup.GroupId
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .bedrock

  BedrockRuntimeVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
      SecurityGroupIds:
        - !GetAtt VPCSecurityGroup.GroupId
        - !GetAtt EC2SecurityGroup.GroupId
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .bedrock-runtime

  BedrockAgentVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
      SecurityGroupIds:
        - !GetAtt VPCSecurityGroup.GroupId
        - !GetAtt EC2SecurityGroup.GroupId
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .bedrock-agent

  BedrockAgentRuntimeVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref Subnet3
        - !Ref Subnet4
      SecurityGroupIds:
        - !GetAtt VPCSecurityGroup.GroupId
        - !GetAtt EC2SecurityGroup.GroupId
      ServiceName: !Join
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .bedrock-agent-runtime

Outputs:

  NotebookInstanceURL:
    Description: SageMaker Notebook Instance URL
    Value: !Join
      - ''
      - - !Sub 'https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/'
        - !GetAtt NotebookInstance.NotebookInstanceName
        - '?view=classic'

  DBEndpoint:
    Description: 'Aurora PostgreSQL Endpoint'
    Value: !GetAtt 'DBCluster.Endpoint.Address'
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBEndPoint'

  DBSecret:
    Description: Database Secret
    Value: !Ref RDSSecrets
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBSecrets'

  AuroraBedrockRole:
    Description: IAM Role for Amazon Aurora and Amazon Bedrock
    Value: !Ref AuroraBedrockRole
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-AuroraBedrockRole'

